// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/data/entities/no_rush_reminders/no_rush_reminders.dart';
import 'core/data/entities/recurring_reminder/recurring_reminder.dart';
import 'core/data/entities/reminder_model/reminder_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 268263672593273972),
      name: 'ReminderEntity',
      lastPropertyId: const obx_int.IdUid(6, 1544358514997996340),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1025189440874542108),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2855691709863330135),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 249868595503815938),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5676139623633541131),
            name: 'preParsedTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1544358514997996340),
            name: 'autoSnoozeInterval',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4840859013511977672),
      name: 'NoRushRemindersEntity',
      lastPropertyId: const obx_int.IdUid(5, 3735516397491070890),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6008919051029956758),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8486124092323286650),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5219953638694943532),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4624309884248202165),
            name: 'preParsedTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3735516397491070890),
            name: 'autoSnoozeInterval',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 7739694852120535916),
      name: 'RecurringReminderEntity',
      lastPropertyId: const obx_int.IdUid(8, 3626559438390925580),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1116781742369601602),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7367685740951274989),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8282219586971521579),
            name: 'dateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9050536571541624987),
            name: 'preParsedTitle',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8332886381302781866),
            name: 'autoSnoozeInterval',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7886303450114993415),
            name: 'recurringInterval',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7702171401591030994),
            name: 'baseDateTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3626559438390925580),
            name: 'paused',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 7739694852120535916),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        3625908549104202617,
        8211713074442004802,
        8941930276315872972
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        6977646995440858326,
        1531304016251776350,
        7945510971215839368,
        7000575314104298846,
        3979468743669662873,
        7976902006372581072,
        8807213509197030047,
        3504029547535205335,
        5311481799135740747,
        3738896508229720795,
        1210521688872764162,
        3675743748536825778,
        3474081413374303710,
        759599050117485925,
        2738553416516986335,
        7581427573856782103,
        5606450117075112675,
        2835586303574756228,
        1480614120101961392
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    ReminderEntity: obx_int.EntityDefinition<ReminderEntity>(
        model: _entities[0],
        toOneRelations: (ReminderEntity object) => [],
        toManyRelations: (ReminderEntity object) => {},
        getId: (ReminderEntity object) => object.id,
        setId: (ReminderEntity object, int id) {
          object.id = id;
        },
        objectToFB: (ReminderEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final preParsedTitleOffset = fbb.writeString(object.preParsedTitle);
          fbb.startTable(7);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(3, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(4, preParsedTitleOffset);
          fbb.addInt64(5, object.autoSnoozeInterval);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final preParsedTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final autoSnoozeIntervalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = ReminderEntity(
              id: idParam,
              title: titleParam,
              dateTime: dateTimeParam,
              preParsedTitle: preParsedTitleParam,
              autoSnoozeInterval: autoSnoozeIntervalParam);

          return object;
        }),
    NoRushRemindersEntity: obx_int.EntityDefinition<NoRushRemindersEntity>(
        model: _entities[1],
        toOneRelations: (NoRushRemindersEntity object) => [],
        toManyRelations: (NoRushRemindersEntity object) => {},
        getId: (NoRushRemindersEntity object) => object.id,
        setId: (NoRushRemindersEntity object, int id) {
          object.id = id;
        },
        objectToFB: (NoRushRemindersEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final preParsedTitleOffset = fbb.writeString(object.preParsedTitle);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(3, preParsedTitleOffset);
          fbb.addInt64(4, object.autoSnoozeInterval);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final autoSnoozeIntervalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final object = NoRushRemindersEntity(
              id: idParam,
              title: titleParam,
              autoSnoozeInterval: autoSnoozeIntervalParam,
              dateTime: dateTimeParam)
            ..preParsedTitle = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '');

          return object;
        }),
    RecurringReminderEntity: obx_int.EntityDefinition<RecurringReminderEntity>(
        model: _entities[2],
        toOneRelations: (RecurringReminderEntity object) => [],
        toManyRelations: (RecurringReminderEntity object) => {},
        getId: (RecurringReminderEntity object) => object.id,
        setId: (RecurringReminderEntity object, int id) {
          object.id = id;
        },
        objectToFB: (RecurringReminderEntity object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final preParsedTitleOffset = fbb.writeString(object.preParsedTitle);
          final recurringIntervalOffset =
              fbb.writeString(object.recurringInterval);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.dateTime.millisecondsSinceEpoch);
          fbb.addOffset(3, preParsedTitleOffset);
          fbb.addInt64(4, object.autoSnoozeInterval);
          fbb.addOffset(5, recurringIntervalOffset);
          fbb.addInt64(6, object.baseDateTime.millisecondsSinceEpoch);
          fbb.addBool(7, object.paused);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final dateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final preParsedTitleParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final autoSnoozeIntervalParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final recurringIntervalParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final baseDateTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final pausedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = RecurringReminderEntity(
              id: idParam,
              title: titleParam,
              dateTime: dateTimeParam,
              preParsedTitle: preParsedTitleParam,
              autoSnoozeInterval: autoSnoozeIntervalParam,
              recurringInterval: recurringIntervalParam,
              baseDateTime: baseDateTimeParam,
              paused: pausedParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ReminderEntity] entity fields to define ObjectBox queries.
class ReminderEntity_ {
  /// See [ReminderEntity.id].
  static final id =
      obx.QueryIntegerProperty<ReminderEntity>(_entities[0].properties[0]);

  /// See [ReminderEntity.title].
  static final title =
      obx.QueryStringProperty<ReminderEntity>(_entities[0].properties[1]);

  /// See [ReminderEntity.dateTime].
  static final dateTime =
      obx.QueryDateProperty<ReminderEntity>(_entities[0].properties[2]);

  /// See [ReminderEntity.preParsedTitle].
  static final preParsedTitle =
      obx.QueryStringProperty<ReminderEntity>(_entities[0].properties[3]);

  /// See [ReminderEntity.autoSnoozeInterval].
  static final autoSnoozeInterval =
      obx.QueryIntegerProperty<ReminderEntity>(_entities[0].properties[4]);
}

/// [NoRushRemindersEntity] entity fields to define ObjectBox queries.
class NoRushRemindersEntity_ {
  /// See [NoRushRemindersEntity.id].
  static final id = obx.QueryIntegerProperty<NoRushRemindersEntity>(
      _entities[1].properties[0]);

  /// See [NoRushRemindersEntity.title].
  static final title = obx.QueryStringProperty<NoRushRemindersEntity>(
      _entities[1].properties[1]);

  /// See [NoRushRemindersEntity.dateTime].
  static final dateTime =
      obx.QueryDateProperty<NoRushRemindersEntity>(_entities[1].properties[2]);

  /// See [NoRushRemindersEntity.preParsedTitle].
  static final preParsedTitle = obx.QueryStringProperty<NoRushRemindersEntity>(
      _entities[1].properties[3]);

  /// See [NoRushRemindersEntity.autoSnoozeInterval].
  static final autoSnoozeInterval =
      obx.QueryIntegerProperty<NoRushRemindersEntity>(
          _entities[1].properties[4]);
}

/// [RecurringReminderEntity] entity fields to define ObjectBox queries.
class RecurringReminderEntity_ {
  /// See [RecurringReminderEntity.id].
  static final id = obx.QueryIntegerProperty<RecurringReminderEntity>(
      _entities[2].properties[0]);

  /// See [RecurringReminderEntity.title].
  static final title = obx.QueryStringProperty<RecurringReminderEntity>(
      _entities[2].properties[1]);

  /// See [RecurringReminderEntity.dateTime].
  static final dateTime = obx.QueryDateProperty<RecurringReminderEntity>(
      _entities[2].properties[2]);

  /// See [RecurringReminderEntity.preParsedTitle].
  static final preParsedTitle =
      obx.QueryStringProperty<RecurringReminderEntity>(
          _entities[2].properties[3]);

  /// See [RecurringReminderEntity.autoSnoozeInterval].
  static final autoSnoozeInterval =
      obx.QueryIntegerProperty<RecurringReminderEntity>(
          _entities[2].properties[4]);

  /// See [RecurringReminderEntity.recurringInterval].
  static final recurringInterval =
      obx.QueryStringProperty<RecurringReminderEntity>(
          _entities[2].properties[5]);

  /// See [RecurringReminderEntity.baseDateTime].
  static final baseDateTime = obx.QueryDateProperty<RecurringReminderEntity>(
      _entities[2].properties[6]);

  /// See [RecurringReminderEntity.paused].
  static final paused = obx.QueryBooleanProperty<RecurringReminderEntity>(
      _entities[2].properties[7]);
}
